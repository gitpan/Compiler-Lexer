/* C++ code produced by gperf version 3.0.4 */
/* Command-line: gperf -L C++ gen/double_charactor_operator.gperf  */
/* Computed positions: -k'1-2' */

#include <lexer.hpp>

inline /*ARGSUSED*/
unsigned int DoubleCharactorOperatorMap::hash(register const char *str)
{
	static unsigned char double_asso_values[] = {
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211,  92,  64,  59,   5,  15,  42,  85,
		54,  49,  62,  22,   2, 120,  20, 125,   7,  44,
		39,  34,  29,  24,  14,   9,   4, 117,  77,  40,
		110, 100,   0,  80,  35, 107, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 102,  97,  72,  92, 211,  47, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211,  60,  27,  70,  65, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
		211, 211, 211, 211, 211, 211, 211
	};
	return double_asso_values[(unsigned char)str[1]+1] + double_asso_values[(unsigned char)str[0]];
}

const char *DoubleCharactorOperatorMap::in_word_set(register const char *str)
{
	static const char *double_operators[] = {
		">=",
		"", "", "", "",
		"$=",
		"",
		"$+",
		"",
		"$7",
		"$#",
		"",
		"$/",
		"",
		"$6",
		"%=",
		"",
		"%+",
		"",
		"$5",
		".=",
		"",
		"+=",
		"",
		"++",
		"$-",
		"",
		"$*",
		"",
		"$4",
		"%$",
		"",
		"$|",
		"",
		"$3",
		"%-",
		"",
		"@+",
		"",
		"$2",
		"$?",
		"",
		"&=",
		"",
		"$1",
		"$:",
		"",
		"$%",
		"",
		"$0",
		"@$",
		"",
		"$`",
		"",
		"$(",
		"@-",
		"",
		"&$",
		"",
		"$'",
		"|=",
		"",
		"*=",
		"",
		"$\"",
		"${",
		"",
		"$)",
		"",
		"$!",
		"$~",
		"",
		"^=",
		"", "",
		"%{",
		"",
		"$]",
		"", "",
		">>",
		"",
		"$9",
		"",
		"**",
		"$>",
		"",
		"||",
		"", "",
		"$&",
		"",
		"!=",
		"", "",
		"@{",
		"",
		"$^",
		"", "",
		"==",
		"",
		"$\\",
		"", "",
		"$<",
		"",
		"$[",
		"", "",
		"<=",
		"",
		"$@",
		"", "",
		"$;",
		"",
		"::",
		"", "",
		"-=",
		"",
		"$8",
		"", "",
		"$,",
		"",
		"&&",
		"", "",
		"$.",
		"",
		"//",
		"", "",
		"~~",
		"", "", "", "",
		"--",
		"", "", "", "",
		"..",
		"", "", "", "", "", "", "", "", "",
		"", "",
		"!~",
		"", "", "", "", "", "", "",
		"=~",
		"", "", "", "", "", "", "", "", "",
		"", "", "", "", "",
		"=>",
		"", "", "", "", "", "", "", "", "",
		"<>",
		"", "", "", "", "", "", "", "", "",
		"->",
		"", "", "", "", "", "", "", "", "",
		"<<"
    };

	register int key = hash(str);
	if (key <= DOUBLE_OPERATOR_MAX_HASH_VALUE && key >= 0) {
		register const char *s = double_operators[key];
		if (*str == *s && !strcmp (str + 1, s + 1)) return s;
	}
	return 0;
}
